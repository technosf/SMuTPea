/*
 * Copyright 2013 technosf [https://github.com/technosf]
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

package com.github.technosf.smutpea.core;

import com.github.technosf.smutpea.core.exceptions.MTAException;
import com.github.technosf.smutpea.core.rfc2821.Command.CommandLine;
import com.github.technosf.smutpea.core.rfc2821.ReplyCode;

/**
 * <em>Message Transfer Agent</em> per RFC2821 section 2.3.3
 * <p>
 * Designed as a per-session call-back interface for behavioral-specifics, with
 * the majority of the (well-defined) REF2821 work done in the framework by
 * session.
 * 
 * @see http://tools.ietf.org/html/rfc2821#section-2.3.3
 * @author technosf
 * @since 0.0.1
 * @version 0.0.1
 */
public interface MTA
{

    /*
     * ------------------------------------------------------------------------
     * 
     * Events passed the implementing MTA definition
     * 
     * ------------------------------------------------------------------------
     */

    /**
     * process an input line event.
     * <p>
     * The line could be a command or a data line.
     * 
     * @param line
     *            the input line
     * @throws MTAException
     */
    void processLine(final String line) throws MTAException;


    /**
     * Connection event.
     * <p>
     * Called by the <code>Session</code> on initiation.
     * 
     * @param greeting
     *            The connection greeting
     */
    void connect();


    /**
     * Process the given commandLine based on the current session state,
     * preparing and setting a reply.
     * <p>
     * The reply (code and description) is generated by the implementing class
     * and retrieved using <code>getReplyCode</code> and
     * <code>getReplyDescription</code>.
     * 
     * @param commandLine
     *            The Command and Parameter parsed from the input
     * @throws MTAException
     *             The MTA implementation experienced an exception.
     */
    void command(final CommandLine commandLine)
            throws MTAException;


    /**
     * Process the send MAIL, per the MTA implementation, derived from Session
     * StateTable and Buffer.
     * <p>
     * Called by the <code>Session</code> when <em>DATA</em> input is ended.
     * 
     * @throws MTAException
     *             The MTA implementation experienced an exception.
     */
    void send() throws MTAException;


    /*
     * ------------------------------------------------------------------------
     * 
     * Responses provided by the implementing MTA definition
     * 
     * ------------------------------------------------------------------------
     */

    /**
     * Is the transmission channel closed?
     * 
     * @return true is the channel is closed
     */
    boolean isClosed();


    /**
     * Return the full response for the last processed command or send.
     * <p>
     * The response is generated by the implementing class and is used in the
     * reply to the call to the MTA from the SMTP client.
     * 
     * @return the full response
     */
    String getResponse();


    /**
     * Return the reply code for the last processed command or send.
     * <p>
     * The reply code is generated by the implementing class and is used in the
     * reply to the call to the MTA from the SMTP client.
     * 
     * @return the reply code
     */
    ReplyCode getReplyCode();


    /**
     * Return the response description for the last processed command or send.
     * <p>
     * The response description is generated by the implementing class and is
     * used in the response to the call to the MTA from the SMTP client.
     * 
     * @return the reply description
     */
    // String getResponseDescription();

    /**
     * Return the MTA Name as displayed by the implementing MTA.
     * 
     * @return The MTA domain
     */
    String getMTADomain();


    /**
     * Return the MTA name as known by the implementing MTA.
     * 
     * @return The MTA name.
     */
    String getMTAName();


    /**
     * Return the MTA date time.
     * 
     * @return The date time
     */
    String getMTADateTime();


    /**
     * Return the {@code Buffer} to use for intermediate mail storage
     * 
     * @return the Buffer
     */
    Buffer getBuffer();
}
