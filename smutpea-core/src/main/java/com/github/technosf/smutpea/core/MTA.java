/*
 * Copyright 2013 technosf [https://github.com/technosf]
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

package com.github.technosf.smutpea.core;

import com.github.technosf.smutpea.core.exceptions.MTAException;
import com.github.technosf.smutpea.core.rfc.Command.CommandLine;
import com.github.technosf.smutpea.core.rfc.ReplyCode;

/**
 * <em>Message Transfer Agent</em> per RFC5321 section 2.3.3
 * <p>
 * Also, RFC5321 Section 4.5.3.  Sizes and Timeouts
 * <p>
 * Designed as a per-session call-back interface for behavioral-specifics, with
 * the majority of the (well-defined) REF5321 work done in the framework by
 * session.
 * 
 * @see http://tools.ietf.org/html/rfc2821#section-2.3.3
 * @see http://tools.ietf.org/html/rfc5321#section-2.3.3
 * @author technosf
 * @since 0.0.1
 * @version 0.0.6
 */
public interface MTA
    extends AutoCloseable
{

   
    /*
     * ------------------------------------------------------------------------
     * 
     * Default Sizes and Timeouts per RFC, for reference
     * 
     * Size limits in Octets, Timeouts in seconds.
     * Can be overwritten
     * 
     * ------------------------------------------------------------------------
     */

    static int MAX_SIZE_LOCAL_PART = 64; // 4.5.3.1.1.  Local-part
    static int MAX_SIZE_DOMAIN = 255;    // 4.5.3.1.2.  Domain
    static int MAX_SIZE_PATH = 256;    // 4.5.3.1.3.  Path
    static int MAX_SIZE_COMMAND_LINE = 512;    // 4.5.3.1.4.  Command Line
    static int MAX_SIZE_REPLY_LINE = 512;    // 4.5.3.1.5.  Reply Line
    static int MAX_SIZE_TEXT_LINE = 1000;    // 4.5.3.1.6.  Text Line
    static int TIMEOUT_220 = 5*60;    // 4.5.3.2.1.  Initial 220 Message: 5 Minutes
    static int TIMEOUT_MAIL = 5*60;    // 4.5.3.2.2.  MAIL Command: 5 Minutes
    static int TIMEOUT_RCPT = 5*60;    // 4.5.3.2.3.  RCPT Command: 5 Minutes
    static int TIMEOUT_DATA = 2*60;    // 4.5.3.2.4.  DATA Initiation: 2 Minutes
    static int TIMEOUT_DATABLOCK = 3*60;    // 4.5.3.2.5.  Data Block: 3 Minutes
    static int TIMEOUT_DATATERM = 10*60;    // 4.5.3.2.6.  DATA Termination: 10 Minutes.
    static int TIMEOUT_SERVER = 5*60;    // 4.5.3.2.7.  Server Timeout: 5 Minutes.


    /*
     * ------------------------------------------------------------------------
     * 
     * Events passed the implementing MTA definition
     * 
     * ------------------------------------------------------------------------
     */


    /**
     * Connection event.
     * <p>
     * Called by the <code>Server</code> on initiation.
     * 
     * @param greeting
     *            The connection greeting
     */
    void connect();


    /**
     * Process an raw input line from a client.
     * <p>
     * The line could be a command or a data line.
     * 
     * @param line
     *            the input line
     * @throws MTAException
     */
    void processInputLine(final String line) throws MTAException;



    /**
     * Process the given commandLine per the current session state,
     * preparing and setting a reply.
     * <p>
     * The reply (code and description) is generated by the implementing class
     * and retrieved using <code>getReplyCode</code> and
     * <code>getReplyDescription</code>.
     * 
     * @param commandLine
     *            The Command and Parameter parsed from the input
     * @throws MTAException
     *             The MTA implementation experienced an exception.
     */
    void command(final CommandLine commandLine)
            throws MTAException;


    /**
     * Process the send MAIL as per the state of the  Session
     * StateTable and Buffer.
     * <p>
     * Called by the <code>Session</code> when <em>DATA</em> input is ended.
     * 
     * @throws MTAException
     *             The MTA implementation experienced an exception.
     */
    void send() throws MTAException;



    /*
     * ------------------------------------------------------------------------
     * 
     * Responses provided by the implementing MTA definition
     * 
     * ------------------------------------------------------------------------
     */

    /**
     * Is the transmission channel closed?
     * 
     * @return true is the channel is closed
     */
    boolean isClosed();


    /**
     * Return the full response for the last processed command or send.
     * <p>
     * The response is generated by the implementing class and is used in the
     * reply to the call to the MTA from the SMTP client.
     * 
     * @return the full response
     */
    String getResponse();


    /**
     * Return the reply code for the last processed command or send.
     * <p>
     * The reply code is generated by the implementing class and is used in the
     * reply to the call to the MTA from the SMTP client.
     * 
     * @return the reply code
     */
    ReplyCode getReplyCode();


    /**
     * Return the response description for the last processed command or send.
     * <p>
     * The response description is generated by the implementing class and is
     * used in the response to the call to the MTA from the SMTP client.
     * 
     * @return the reply description
     */
    // String getResponseDescription();

    /**
     * Return the MTA Name as displayed by the implementing MTA.
     * 
     * @return The MTA domain
     */
    String getMTADomain();


    /**
     * Return the MTA name as known by the implementing MTA.
     * 
     * @return The MTA name.
     */
    String getMTAName();


    /**
     * Return the MTA date time.
     * 
     * @return The date time
     */
    String getMTADateTime();


    /**
     * Return the {@code Buffer} to use for intermediate mail storage
     * 
     * @return the Buffer
     */
    Buffer getBuffer();
}
